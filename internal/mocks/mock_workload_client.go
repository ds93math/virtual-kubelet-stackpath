// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackpath/vk-stackpath-provider/internal/api/workload/workload_client/workload (interfaces: ClientService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
	workload "github.com/stackpath/vk-stackpath-provider/internal/api/workload/workload_client/workload"
)

// WorkloadClientService is a mock of ClientService interface.
type WorkloadClientService struct {
	ctrl     *gomock.Controller
	recorder *WorkloadClientServiceMockRecorder
}

// WorkloadClientServiceMockRecorder is the mock recorder for WorkloadClientService.
type WorkloadClientServiceMockRecorder struct {
	mock *WorkloadClientService
}

// NewWorkloadClientService creates a new mock instance.
func NewWorkloadClientService(ctrl *gomock.Controller) *WorkloadClientService {
	mock := &WorkloadClientService{ctrl: ctrl}
	mock.recorder = &WorkloadClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *WorkloadClientService) EXPECT() *WorkloadClientServiceMockRecorder {
	return m.recorder
}

// SetTransport mocks base method.
func (m *WorkloadClientService) SetTransport(arg0 runtime.ClientTransport) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransport", arg0)
}

// SetTransport indicates an expected call of SetTransport.
func (mr *WorkloadClientServiceMockRecorder) SetTransport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransport", reflect.TypeOf((*WorkloadClientService)(nil).SetTransport), arg0)
}

// WatchNetworks2 mocks base method.
func (m *WorkloadClientService) WatchNetworks2(arg0 *workload.WatchNetworks2Params, arg1 runtime.ClientAuthInfoWriter, arg2 ...workload.ClientOption) (*workload.WatchNetworks2OK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchNetworks2", varargs...)
	ret0, _ := ret[0].(*workload.WatchNetworks2OK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchNetworks2 indicates an expected call of WatchNetworks2.
func (mr *WorkloadClientServiceMockRecorder) WatchNetworks2(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchNetworks2", reflect.TypeOf((*WorkloadClientService)(nil).WatchNetworks2), varargs...)
}
