// Code generated by go-swagger; DO NOT EDIT.

package workload_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContainerStatusTerminated Properties related to terminated containers
//
// swagger:model ContainerStatusTerminated
type ContainerStatusTerminated struct {

	// The exit code of the command that started the container
	ExitCode int32 `json:"exitCode,omitempty"`

	// The date a container terminated
	// Format: date-time
	FinishedAt strfmt.DateTime `json:"finishedAt,omitempty"`

	// A more detailed explanation of a container's termination
	Message string `json:"message,omitempty"`

	// The reason a container terminated
	Reason string `json:"reason,omitempty"`

	// The date a container started
	// Format: date-time
	StartedAt strfmt.DateTime `json:"startedAt,omitempty"`
}

// Validate validates this container status terminated
func (m *ContainerStatusTerminated) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFinishedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContainerStatusTerminated) validateFinishedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.FinishedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("finishedAt", "body", "date-time", m.FinishedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ContainerStatusTerminated) validateStartedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.StartedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("startedAt", "body", "date-time", m.StartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this container status terminated based on context it is used
func (m *ContainerStatusTerminated) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ContainerStatusTerminated) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContainerStatusTerminated) UnmarshalBinary(b []byte) error {
	var res ContainerStatusTerminated
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
