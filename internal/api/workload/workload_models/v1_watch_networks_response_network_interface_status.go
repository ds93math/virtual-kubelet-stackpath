// Code generated by go-swagger; DO NOT EDIT.

package workload_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1WatchNetworksResponseNetworkInterfaceStatus v1 watch networks response network interface status
//
// swagger:model v1WatchNetworksResponseNetworkInterfaceStatus
type V1WatchNetworksResponseNetworkInterfaceStatus struct {

	// gateway
	Gateway string `json:"gateway,omitempty"`

	// host Ip address
	HostIPAddress string `json:"hostIpAddress,omitempty"`

	// ip address
	IPAddress string `json:"ipAddress,omitempty"`

	// ip address aliases
	IPAddressAliases []string `json:"ipAddressAliases"`

	// ipv6 address
	IPV6Address string `json:"ipv6Address,omitempty"`

	// ipv6 address aliases
	IPV6AddressAliases []string `json:"ipv6AddressAliases"`

	// ipv6 gateway
	IPV6Gateway string `json:"ipv6Gateway,omitempty"`

	// labels
	Labels V1StringMapEntry `json:"labels,omitempty"`

	// ovs region code
	OvsRegionCode int32 `json:"ovsRegionCode,omitempty"`

	// ports
	Ports V1InstancePortMapEntry `json:"ports,omitempty"`

	// primary network interface
	PrimaryNetworkInterface bool `json:"primaryNetworkInterface,omitempty"`
}

// Validate validates this v1 watch networks response network interface status
func (m *V1WatchNetworksResponseNetworkInterfaceStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1WatchNetworksResponseNetworkInterfaceStatus) validateLabels(formats strfmt.Registry) error {
	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	if m.Labels != nil {
		if err := m.Labels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labels")
			}
			return err
		}
	}

	return nil
}

func (m *V1WatchNetworksResponseNetworkInterfaceStatus) validatePorts(formats strfmt.Registry) error {
	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	if m.Ports != nil {
		if err := m.Ports.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ports")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ports")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 watch networks response network interface status based on the context it is used
func (m *V1WatchNetworksResponseNetworkInterfaceStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1WatchNetworksResponseNetworkInterfaceStatus) contextValidateLabels(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Labels.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("labels")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("labels")
		}
		return err
	}

	return nil
}

func (m *V1WatchNetworksResponseNetworkInterfaceStatus) contextValidatePorts(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Ports.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ports")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ports")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1WatchNetworksResponseNetworkInterfaceStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1WatchNetworksResponseNetworkInterfaceStatus) UnmarshalBinary(b []byte) error {
	var res V1WatchNetworksResponseNetworkInterfaceStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
