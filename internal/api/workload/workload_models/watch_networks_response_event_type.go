// Code generated by go-swagger; DO NOT EDIT.

package workload_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// WatchNetworksResponseEventType watch networks response event type
//
// swagger:model WatchNetworksResponseEventType
type WatchNetworksResponseEventType string

func NewWatchNetworksResponseEventType(value WatchNetworksResponseEventType) *WatchNetworksResponseEventType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated WatchNetworksResponseEventType.
func (m WatchNetworksResponseEventType) Pointer() *WatchNetworksResponseEventType {
	return &m
}

const (

	// WatchNetworksResponseEventTypeUNKNOWN captures enum value "UNKNOWN"
	WatchNetworksResponseEventTypeUNKNOWN WatchNetworksResponseEventType = "UNKNOWN"

	// WatchNetworksResponseEventTypeUPDATED captures enum value "UPDATED"
	WatchNetworksResponseEventTypeUPDATED WatchNetworksResponseEventType = "UPDATED"

	// WatchNetworksResponseEventTypeDELETED captures enum value "DELETED"
	WatchNetworksResponseEventTypeDELETED WatchNetworksResponseEventType = "DELETED"
)

// for schema
var watchNetworksResponseEventTypeEnum []interface{}

func init() {
	var res []WatchNetworksResponseEventType
	if err := json.Unmarshal([]byte(`["UNKNOWN","UPDATED","DELETED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		watchNetworksResponseEventTypeEnum = append(watchNetworksResponseEventTypeEnum, v)
	}
}

func (m WatchNetworksResponseEventType) validateWatchNetworksResponseEventTypeEnum(path, location string, value WatchNetworksResponseEventType) error {
	if err := validate.EnumCase(path, location, value, watchNetworksResponseEventTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this watch networks response event type
func (m WatchNetworksResponseEventType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateWatchNetworksResponseEventTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this watch networks response event type based on context it is used
func (m WatchNetworksResponseEventType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
